subprojects {
    apply plugin: 'java'
    group = 'yeti.lang'
    repositories {
        mavenRepo urls: "http://jmockit.googlecode.com/svn/maven-repo"
        mavenCentral()
    }
    dependencies {
        testCompile 'junit:junit:4.10',
                    'mockit:jmockit:0.999.10'
    }
}

yeti_project_root = "$project.projectDir"

project(':asm') {
    version =  '3.1r'

    asmJarDir  =            "$project.gradle.gradleUserHomeDir/cache/~mzz/asm/jars"
    asmJarName =            'asm-3.1.jar'
    asmRenamedJarName =     'asm-3.1r.jar'
    asmJarDependencyVersion =    '3.1'

    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
                    name = "Madis' ASM jar location"
                addArtifactPattern 'http://linux.ee/[organisation]/[module]-[revision].[ext]'
        }
    }

    dependencies {
        compile     group: '~mzz', name: 'asm', version: asmJarDependencyVersion
    }

    task downloadAsm {
        mkdir asmJarDir
        ant.get(src: "http://linux.ee/~mzz/$asmJarName", dest: asmJarDir, skipexisting: true, verbose: true)
    }

    compileJava.dependsOn('downloadAsm')

    task jar(overwrite: true, dependsOn: 'compileJava') << {
        description = "Overwrites the standard jar task with one that renames the class files in the asm jar."
        inputs.file("$asmJarDir/$asmJarName")
        outputs.file file("$buildDir/libs/$asmRenamedJarName")

        mkdir "$buildDir/libs"
        ant.java(classname: "yeti.lang.Rename", failonerror: true) {
            classpath(path: "$project.buildDir/classes/main")
            arg(value: "$asmJarDir/$asmJarName")
            arg(value: "$buildDir/libs/$asmRenamedJarName")
        }
    }
}

project(':lang') {

}

project(':special') {
    dependencies {
        compile project(':asm')
    }
}

project(':compiler') {
    dependencies {
        compile project(':asm')
        compile project(':special')
        compile project(':lang')
     }
}

// IntelliJ IDEA configuration sync
/*
task intellijSync {
    description = "Adds gradle dependecies to IntelliJ project library"

    final def librariesDir = new File("$yeti_project_root/.idea${File.separator}libraries")
    librariesDir.mkdirs()

    final def userHomeGradle = project.gradle.gradleUserHomeDir
    println """If you haven't done so already, in the IntelliJ Path Variable Preferences,
                set the USER_HOME_GRADLE variable to '$userHomeGradle.path'"""

    def makeJarList = { path ->
        path.split(File.pathSeparator).collect {
            it.replaceAll userHomeGradle.path, "\\\$USER_HOME_GRADLE\\\$"
        }.collect {
            it.replaceAll yeti_project_root, "\\\$PROJECT_DIR\\\$"
        }
    }
    final def compileJars = makeJarList(configurations.compile.asPath)
    final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

    def createLibrary = { fileName, libraryName, jars ->
        final def gradleLibXml = new File(librariesDir, fileName)
        gradleLibXml.write """
<component name="libraryTable">
  <library name="$libraryName"/>
</component>"""
        final def xmlRoot = new XmlParser().parse(gradleLibXml)
        final def classesNode = xmlRoot.library[0].appendNode('CLASSES')

        jars.each { jar ->
            classesNode.appendNode('root', [url: "jar://$jar!/"])
        }

        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
        gradleLibXml.write writer.toString()
        println "File '${gradleLibXml.path}' updated"
    }
    createLibrary 'Gradle_Libraries.xml', 'Gradle Libraries', compileJars
    createLibrary 'Gradle_Test_Libraries.xml', 'Gradle Test Libraries', testJars
}
*/